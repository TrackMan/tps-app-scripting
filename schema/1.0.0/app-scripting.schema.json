{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://schemas.trackman.com/app-scripting/1-0-0.json",
  "title": "TrackMan App Scripting",
  "description": "Schema for orchestrating multi-app training flows across Range Analysis and Performance Center.",
  "type": "object",
  "additionalProperties": false,
  "properties": {
    "$schema": {
      "type": "string",
      "description": "Optional pointer from an instance file to this schema (e.g., ../schema/latest/app-scripting.schema.json). Has no runtime effect in the engine; used by editors/validators."
    },
    "version": {
      "type": "string",
      "description": "Author-supplied semantic version of the script payload format used by this file (does not change validator behavior).",
      "pattern": "^\\d+\\.\\d+\\.\\d+$",
      "default": "1.0.0",
      "examples": [
        "1.0.0"
      ]
    },
    "id": {
      "type": "string",
      "description": "Unique identifier for the script."
    },
    "startMode": {
      "$ref": "#/$defs/StartMode"
    },
    "endMode": {
      "$ref": "#/$defs/EndMode"
    },
    "activities": {
      "type": "array",
      "description": "Ordered list of activities. Activities execute sequentially.",
      "minItems": 1,
      "items": {
        "$ref": "#/$defs/Activity"
      }
    }
  },
  "required": [
    "activities"
  ],
  "$defs": {
    "StartMode": {
      "type": "string",
      "enum": [
        "Append",
        "Overwrite"
      ],
      "default": "Overwrite",
      "description": "Defines how the script should start.\n- Append: to the currently running script\n- Overwrite: replace currently running script"
    },
    "EndMode": {
      "type": "string",
      "enum": [
        "Wait",
        "Exit"
      ],
      "default": "Exit",
      "description": "Defines how the script should end.\n- Wait: wait for user interaction\n- Exit: automatically exit"
    },
    "IdString": {
      "type": "string",
      "description": "Stable identifier for activities/steps. Lowercase, kebab/number friendly for logs and selectors.",
      "pattern": "^[a-z][a-z0-9-]*$",
      "examples": [
        "ra-1",
        "ra-step-2",
        "pc-ap-step-1"
      ]
    },
    "Message": {
      "type": "object",
      "description": "Timed banner/message shown by the host app (intro/success/fail/end).",
      "additionalProperties": false,
      "properties": {
        "header": {
          "type": "string",
          "minLength": 1,
          "description": "Primary message header text displayed to the user."
        },
        "description": {
          "type": "string",
          "default": "",
          "description": "Secondary message description text displayed to the user. Keep concise; plain text only."
        },
        "seconds": {
          "type": "integer",
          "minimum": 0,
          "default": 3,
          "description": "Seconds to display message on screen. Use -1 to require user to click button to dismiss message."
        }
      },
      "required": [
        "header",
        "seconds"
      ]
    },
    "ConditionType": {
      "type": "string",
      "enum": [
        "",
        "And",
        "Or"
      ],
      "default": "",
      "description": "How to combine multiple per-shot condition clauses for a single shot.\n- (empty): no condition type specified (for when no conditions are present)\n- And: all clauses must pass for the shot to qualify.\n- Or: any one clause passing qualifies the shot."
    },
    "ParameterName": {
      "description": "Parameter against which shots are checked for conditions or displayed in UI. Values are expressed in meters for distance parameters, meters per second for speeds, and degrees for angles. Available parameters: Club metrics (ClubSpeed, AttackAngle, ClubPath, DynamicLoft, FaceAngle, DynamicLie, ImpactHeight, SpinLoft, FaceToPath, SwingPlane, SwingDirection, LowPoint, ImpactOffset), Ball flight (Curve, Height, Carry, Total, Side, SideTotal, LandingAngle, FromPin, BallSpeed, SmashFactor, LaunchAngle, LaunchDirection, SpinRate, SpinAxis), Performance (StrokesGained).",
      "type": "string",
      "enum": [
        "ClubSpeed",
        "AttackAngle",
        "ClubPath",
        "DynamicLoft",
        "FaceAngle",
        "DynamicLie",
        "ImpactHeight",
        "SpinLoft",
        "FaceToPath",
        "SwingPlane",
        "SwingDirection",
        "LowPoint",
        "ImpactOffset",
        "Curve",
        "Height",
        "Carry",
        "Total",
        "Side",
        "SideTotal",
        "LandingAngle",
        "FromPin",
        "BallSpeed",
        "SmashFactor",
        "LaunchAngle",
        "LaunchDirection",
        "SpinRate",
        "SpinAxis",
        "StrokesGained"
      ],
      "examples": [
        "Total",
        "Curve",
        "FromPin",
        "StrokesGained"
      ]
    },
    "ConditionClause": {
      "type": "object",
      "description": "Single per-shot check. Bounds are inclusive. If both min and max are set and equal â†’ exact match.",
      "additionalProperties": false,
      "properties": {
        "parameter": {
          "$ref": "#/$defs/ParameterName",
          "description": "Metric to evaluate for this shot."
        },
        "min": {
          "type": "number",
          "description": "Inclusive lower bound. Omit if not needed."
        },
        "max": {
          "type": "number",
          "description": "Inclusive upper bound. Omit if not needed."
        }
      },
      "required": [
        "parameter"
      ],
      "anyOf": [
        {
          "required": [
            "min"
          ]
        },
        {
          "required": [
            "max"
          ]
        }
      ],
      "examples": [
        {
          "parameter": "Total",
          "min": 200
        },
        {
          "parameter": "Curve",
          "min": -3,
          "max": 3
        },
        {
          "parameter": "Curve",
          "min": 10,
          "max": 10
        }
      ]
    },
    "RangeAnalysisScriptedConditions": {
      "type": "object",
      "description": "Success/fail condition for Range Analysis steps. Counts shots that pass the per-shot clauses (if provided).",
      "additionalProperties": false,
      "properties": {
        "nodeType": {
          "const": "RangeAnalysisScriptedConditions",
          "description": "Discriminator. Must be exactly this value."
        },
        "shots": {
          "type": "integer",
          "minimum": 1,
          "description": "Threshold count.\n- For success: number of qualifying shots needed to pass.\n- For fail: number of violating shots that triggers failure."
        },
        "conditionType": {
          "$ref": "#/$defs/ConditionType"
        },
        "conditions": {
          "type": "array",
          "description": "Per-shot clauses. If omitted, any shot counts toward the threshold.",
          "minItems": 0,
          "items": {
            "$ref": "#/$defs/ConditionClause"
          }
        }
      },
      "required": [
        "nodeType",
        "shots"
      ]
    },
    "PerformanceCenterScriptedConditions": {
      "type": "object",
      "description": "Success/fail condition for Performance Center steps. Same semantics as Range Analysis conditions.",
      "additionalProperties": false,
      "properties": {
        "nodeType": {
          "const": "PerformanceCenterScriptedConditions",
          "description": "Discriminator. Must be exactly this value."
        },
        "shots": {
          "type": "integer",
          "minimum": 1,
          "description": "Threshold count (see RangeAnalysisScriptedConditions.shots)."
        },
        "conditionType": {
          "$ref": "#/$defs/ConditionType"
        },
        "conditions": {
          "type": "array",
          "description": "Per-shot clauses. If omitted, any shot counts toward the threshold.",
          "minItems": 0,
          "items": {
            "$ref": "#/$defs/ConditionClause"
          }
        }
      },
      "required": [
        "nodeType",
        "shots"
      ]
    },
    "RangeAnalysisScriptedSetup": {
      "type": "object",
      "description": "Environment for a Range Analysis step.",
      "additionalProperties": false,
      "properties": {
        "nodeType": {
          "const": "RangeAnalysisScriptedSetup",
          "description": "Discriminator. Must be exactly this value."
        },
        "club": {
          "type": "string",
          "minLength": 1,
          "enum": [
            "None",
            "Drv",
            "_2W",
            "_3W",
            "_4W",
            "_5W",
            "_6W",
            "_7W",
            "_8W",
            "_9W",
            "_1H",
            "_2H",
            "_3H",
            "_4H",
            "_5H",
            "_6H",
            "_7H",
            "_8H",
            "_9H",
            "_1I",
            "_2I",
            "_3I",
            "_4I",
            "_5I",
            "_6I",
            "_7I",
            "_8I",
            "_9I",
            "_PW",
            "_SW",
            "_LW",
            "_50W",
            "_52W",
            "_54W",
            "_56W",
            "_58W",
            "_60W",
            "Putt"
          ],
          "description": "Club specification for the range analysis shot. Optional, defaults to 'Drv'. Available clubs: Drivers (Drv), Woods (_2W to _9W), Hybrids (_1H to _9H), Irons (_1I to _9I), Wedges (_PW, _SW, _LW, _50W, _52W, _54W, _56W, _58W, _60W), and Putter (Putt).",
          "default": "Drv"
        },
        "distance": {
          "type": "number",
          "minimum": 0,
          "description": "Required distance to the target in meters."
        }
      },
      "required": [
        "nodeType",
        "club",
        "distance"
      ]
    },
    "PerformanceCenterApproachScriptedSetup": {
      "type": "object",
      "description": "Approach-shot scenario configuration in Performance Center.",
      "additionalProperties": false,
      "properties": {
        "nodeType": {
          "const": "PerformanceCenterApproachScriptedSetup",
          "description": "Discriminator. Must be exactly this value."
        },
        "hole": {
          "type": "integer",
          "minimum": 1,
          "description": "Hole number (1-based)."
        },
        "pin": {
          "type": "integer",
          "minimum": 1,
          "description": "Pin index on the selected hole (1-based)."
        },
        "playerCategory": {
          "type": "string",
          "enum": [
            "Handicap",
            "PGA",
            "LPGA"
          ],
          "default": "Handicap",
          "description": "Baseline cohort for strokes-gained and contours."
        },
        "hcp": {
          "type": "integer",
          "minimum": 0,
          "maximum": 15,
          "description": "Player handicap used for baselines."
        },
        "gender": {
          "type": "string",
          "enum": [
            "Male",
            "Female",
            "Unspecified"
          ],
          "default": "Unspecified",
          "description": "Baseline cohort dimension."
        },
        "minDistance": {
          "type": "number",
          "minimum": 0,
          "description": "Minimum approach distance in meters. Optional, defaults to 30 meters. If minDistance != maxDistance, each shot will be from a random distance between the two values.",
          "default": 30.0
        },
        "maxDistance": {
          "type": "number",
          "minimum": 0,
          "description": "Maximum approach distance in meters. Optional, defaults to 220 meters. If minDistance != maxDistance, each shot will be from a random distance between the two values.",
          "default": 220.0
        },
        "club": {
          "type": "string",
          "description": "Club specification for the approach shot. Optional, defaults to 'Drv'. Available clubs: {Drv, _2W, _3W, _4W, _5W, _6W, _7W, _8W, _9W, _1H, _2H, _3H, _4H, _5H, _6H, _7H, _8H, _9H, _1I, _2I, _3I, _4I, _5I, _6I, _7I, _8I, _9I, _PW, _SW, _LW, _50W, _52W, _54W, _56W, _58W, _60W, Putt}.",
          "default": "Drv"
        }
      },
      "required": [
        "nodeType",
        "hole",
        "pin",
        "playerCategory",
        "hcp",
        "gender",
        "minDistance",
        "maxDistance"
      ]
    },
    "PerformanceCenterTeeShotsScriptedSetup": {
      "type": "object",
      "description": "Tee-shot scenario configuration in Performance Center.",
      "additionalProperties": false,
      "properties": {
        "nodeType": {
          "const": "PerformanceCenterTeeShotsScriptedSetup",
          "description": "Discriminator. Must be exactly this value."
        },
        "hole": {
          "type": "integer",
          "minimum": 1,
          "description": "Hole number (1-based)."
        },
        "playerCategory": {
          "type": "string",
          "enum": [
            "Handicap",
            "PGA",
            "LPGA"
          ],
          "default": "Handicap",
          "description": "Baseline cohort for strokes-gained and contours."
        },
        "hcp": {
          "type": "integer",
          "minimum": 0,
          "maximum": 15,
          "description": "Player handicap used for baselines. Required only when playerCategory is 'Handicap'."
        },
        "gender": {
          "type": "string",
          "enum": [
            "Male",
            "Female",
            "Unspecified"
          ],
          "default": "Unspecified",
          "description": "Baseline cohort dimension."
        },
        "courseDistance": {
          "type": "integer",
          "minimum": 1000,
          "maximum": 9000,
          "description": "Total course distance in meters (context for tee-shot modeling). Optional, defaults to 6900 meters.",
          "default": 6900
        },
        "club": {
          "type": "string",
          "description": "Club specification for the tee shot. Optional, defaults to 'Drv'. Available clubs: {Drv, _2W, _3W, _4W, _5W, _6W, _7W, _8W, _9W, _1H, _2H, _3H, _4H, _5H, _6H, _7H, _8H, _9H, _1I, _2I, _3I, _4I, _5I, _6I, _7I, _8I, _9I, _PW, _SW, _LW, _50W, _52W, _54W, _56W, _58W, _60W, Putt}.",
          "default": "Drv"
        }
      },
      "required": [
        "nodeType",
        "hole",
        "playerCategory",
        "gender",
        "courseDistance"
      ],
      "allOf": [
        {
          "if": {
            "properties": {
              "playerCategory": {
                "const": "Handicap"
              }
            }
          },
          "then": {
            "required": ["hcp"]
          }
        }
      ]
    },
    "RangeAnalysisScriptedLogic": {
      "type": "object",
      "description": "Evaluation logic for a Range Analysis step: setup + success/fail conditions + flow flags.",
      "additionalProperties": false,
      "properties": {
        "nodeType": {
          "const": "RangeAnalysisScriptedLogic",
          "description": "Discriminator. Must be exactly this value."
        },
        "setup": {
          "$ref": "#/$defs/RangeAnalysisScriptedSetup",
          "description": "Per-step environment."
        },
        "successCondition": {
          "$ref": "#/$defs/RangeAnalysisScriptedConditions",
          "description": "Threshold/clauses to mark the step as succeeded."
        },
        "failCondition": {
          "$ref": "#/$defs/RangeAnalysisScriptedConditions",
          "description": "Threshold/clauses to mark the step as failed."
        },
        "canRetry": {
          "type": "boolean",
          "default": false,
          "description": "If true, user can immediately retry the step upon failure (counters reset)."
        },
        "skipOnSuccess": {
          "type": "boolean",
          "default": false,
          "description": "If true, step ends as soon as success is reached and flow proceeds."
        }
      },
      "required": [
        "nodeType",
        "setup",
        "successCondition",
        "skipOnSuccess"
      ]
    },
    "PerformanceCenterScriptedLogic": {
      "type": "object",
      "description": "Evaluation logic for a Performance Center step: setup + success/fail conditions + flow flags.",
      "additionalProperties": false,
      "properties": {
        "nodeType": {
          "const": "PerformanceCenterScriptedLogic",
          "description": "Discriminator. Must be exactly this value."
        },
        "setup": {
          "oneOf": [
            {
              "$ref": "#/$defs/PerformanceCenterApproachScriptedSetup"
            },
            {
              "$ref": "#/$defs/PerformanceCenterTeeShotsScriptedSetup"
            }
          ],
          "description": "Pick exactly one setup variant matching the step scenario."
        },
        "successCondition": {
          "$ref": "#/$defs/PerformanceCenterScriptedConditions",
          "description": "Threshold/clauses to mark the step as succeeded."
        },
        "failCondition": {
          "$ref": "#/$defs/PerformanceCenterScriptedConditions",
          "description": "Threshold/clauses to mark the step as failed."
        },
        "canRetry": {
          "type": "boolean",
          "default": false,
          "description": "If true, user can immediately retry the step upon failure (counters reset)."
        },
        "skipOnSuccess": {
          "type": "boolean",
          "default": false,
          "description": "If true, step ends as soon as success is reached and flow proceeds."
        }
      },
      "required": [
        "nodeType",
        "setup",
        "successCondition"
      ]
    },
    "UIFrameAction": {
      "type": "object",
      "description": "UI frame management actions for different shot phases.",
      "additionalProperties": false,
      "properties": {
        "addFrames": {
          "type": "array",
          "description": "UI frames to add/show.",
          "items": {
            "$ref": "#/$defs/UIFrameName"
          },
          "default": []
        },
        "removeFrames": {
          "type": "array",
          "description": "UI frames to remove/hide.",
          "items": {
            "$ref": "#/$defs/UIFrameName"
          },
          "default": []
        },
        "disableFrames": {
          "type": "array",
          "description": "UI frames to disable (keep visible but non-interactive).",
          "items": {
            "$ref": "#/$defs/UIFrameName"
          },
          "default": []
        }
      }
    },
    "UIFrameName": {
      "type": "string",
      "description": "Names of UI frames that can be manipulated during different shot phases. Available frames: Player (player information), Markers (course markers), Tiles (data tiles), ShotList (shot history), GoToSetup (setup controls), Minimap (course overview), BroadcastTiles (broadcast view tiles), ClubDelivery (club delivery analysis), AllTiles (all data tiles), LandingCamera (landing view), StrokesGainedSummaryTile (strokes gained summary), StrokesGainedShotResult (strokes gained per shot), TargetCarry (target carry display).",
      "enum": [
        "Player",
        "Markers", 
        "Tiles",
        "ShotList",
        "GoToSetup",
        "Minimap",
        "BroadcastTiles",
        "ClubDelivery",
        "AllTiles",
        "LandingCamera",
        "StrokesGainedSummaryTile",
        "StrokesGainedShotResult",
        "TargetCarry"
      ]
    },
    "RangeAnalysisScriptedUI": {
      "type": "object",
      "description": "UI hints/overrides for Range Analysis. Empty object means defaults.",
      "additionalProperties": false,
      "properties": {
        "nodeType": {
          "const": "RangeAnalysisScriptedUI",
          "description": "Discriminator. Must be exactly this value."
        },
        "targetAvailable": {
          "type": "boolean",
          "description": "Whether a target will be displayed on the screen and in the UI. Optional, defaults to true.",
          "default": true
        },
        "activeDataTiles": {
          "type": "array",
          "description": "Selection of data tiles displayed on screen on the left side. Optional, defaults to tiles set by TPS. Only first 8 will be used.",
          "items": {
            "$ref": "#/$defs/ParameterName"
          },
          "maxItems": 8,
          "default": []
        },
        "shotListParameters": {
          "type": "array",
          "description": "List of available parameters to select for display in the shot list. Optional, defaults to [Total, Carry, BallSpeed]. Valid values are same as activeDataTiles plus StrokesGained.",
          "items": {
            "$ref": "#/$defs/ParameterName"
          },
          "default": ["Total", "Carry", "BallSpeed"]
        },
        "defaultShotListParameter": {
          "$ref": "#/$defs/ParameterName",
          "description": "Parameter to display in the shot list by default. Optional, defaults to 'Carry'.",
          "default": "Carry"
        },
        "beforeShot": {
          "$ref": "#/$defs/UIFrameAction",
          "description": "UI frame management before taking a shot. Optional, defaults to default game behavior if left empty."
        },
        "duringShot": {
          "$ref": "#/$defs/UIFrameAction",
          "description": "UI frame management during shot playback. Optional, defaults to default game behavior if left empty."
        },
        "afterShot": {
          "$ref": "#/$defs/UIFrameAction",
          "description": "UI frame management after ball stops. Optional, defaults to default game behavior if left empty."
        }
      },
      "required": [
        "nodeType"
      ]
    },
    "PerformanceCenterScriptedUI": {
      "type": "object",
      "description": "UI hints/overrides for Performance Center. Empty object means defaults.",
      "additionalProperties": false,
      "properties": {
        "nodeType": {
          "const": "PerformanceCenterScriptedUI",
          "description": "Discriminator. Must be exactly this value."
        },
        "targetAvailable": {
          "type": "boolean",
          "description": "Whether target/aiming functionality is available. Optional, defaults to true.",
          "default": true
        },
        "activeDataTiles": {
          "type": "array",
          "description": "Selection of data tiles displayed on screen on the left side. Optional, defaults to tiles set by TPS. Only first 8 will be used.",
          "items": {
            "$ref": "#/$defs/ParameterName"
          },
          "maxItems": 8,
          "default": []
        },
        "shotListParameters": {
          "type": "array",
          "description": "List of available parameters to select for display in the shot list. Optional, defaults to [Total, Carry, BallSpeed]. Valid values are same as activeDataTiles plus StrokesGained.",
          "items": {
            "$ref": "#/$defs/ParameterName"
          },
          "default": ["Total", "Carry", "BallSpeed"]
        },
        "defaultShotListParameter": {
          "$ref": "#/$defs/ParameterName",
          "description": "Parameter to display in the shot list by default. Optional, defaults to 'Carry'.",
          "default": "Carry"
        },
        "beforeShot": {
          "$ref": "#/$defs/UIFrameAction",
          "description": "UI frame management before taking a shot. Optional, defaults to default game behavior if left empty."
        },
        "duringShot": {
          "$ref": "#/$defs/UIFrameAction",
          "description": "UI frame management during shot playback. Optional, defaults to default game behavior if left empty."
        },
        "afterShot": {
          "$ref": "#/$defs/UIFrameAction",
          "description": "UI frame management after ball stops. Optional, defaults to default game behavior if left empty."
        }
      },
      "required": [
        "nodeType"
      ]
    },
    "RangeAnalysisScriptedStep": {
      "type": "object",
      "description": "One step in a Range Analysis activity.",
      "additionalProperties": false,
      "properties": {
        "nodeType": {
          "const": "RangeAnalysisScriptedStep",
          "description": "Discriminator. Must be exactly this value."
        },
        "id": {
          "$ref": "#/$defs/IdString",
          "description": "Step identifier unique within the activity."
        },
        "introMessage": {
          "$ref": "#/$defs/Message",
          "description": "Shown before the step starts collecting shots."
        },
        "successMessage": {
          "$ref": "#/$defs/Message",
          "description": "Shown when the step succeeds."
        },
        "failMessage": {
          "$ref": "#/$defs/Message",
          "description": "Shown when the step fails."
        },
        "logic": {
          "$ref": "#/$defs/RangeAnalysisScriptedLogic",
          "description": "Evaluation configuration."
        },
        "ui": {
          "$ref": "#/$defs/RangeAnalysisScriptedUI",
          "description": "Optional UI hints (empty for defaults)."
        },
        "greenTarget": {
          "type": "boolean",
          "description": "Whether to show a green target/flag.",
          "default": false
        },
        "targetWidthHCP": {
          "type": "number",
          "minimum": 0,
          "description": "Target width for handicap players (in meters)."
        },
        "targetWidthPro": {
          "type": "number",
          "minimum": 0,
          "description": "Target width for professional players (in meters)."
        }
      },
      "required": [
        "nodeType",
        "id",
        "introMessage",
        "successMessage",
        "failMessage",
        "logic",
        "ui"
      ]
    },
    "PerformanceCenterScriptedStep": {
      "type": "object",
      "description": "One step in a Performance Center activity.",
      "additionalProperties": false,
      "properties": {
        "nodeType": {
          "const": "PerformanceCenterScriptedStep",
          "description": "Discriminator. Must be exactly this value."
        },
        "id": {
          "$ref": "#/$defs/IdString",
          "description": "Step identifier unique within the activity."
        },
        "introMessage": {
          "$ref": "#/$defs/Message",
          "description": "Shown before the step starts collecting shots."
        },
        "successMessage": {
          "$ref": "#/$defs/Message",
          "description": "Shown when the step succeeds."
        },
        "failMessage": {
          "$ref": "#/$defs/Message",
          "description": "Shown when the step fails."
        },
        "logic": {
          "$ref": "#/$defs/PerformanceCenterScriptedLogic",
          "description": "Evaluation configuration."
        },
        "ui": {
          "$ref": "#/$defs/PerformanceCenterScriptedUI",
          "description": "Optional UI hints (empty for defaults)."
        }
      },
      "required": [
        "nodeType",
        "id",
        "introMessage",
        "successMessage",
        "failMessage",
        "logic",
        "ui"
      ]
    },
    "RangeAnalysisScriptedActivity": {
      "type": "object",
      "description": "Activity targeting the Range Analysis app. Steps run in order.",
      "additionalProperties": false,
      "properties": {
        "nodeType": {
          "const": "RangeAnalysisScriptedActivity",
          "description": "Discriminator. Must be exactly this value."
        },
        "id": {
          "$ref": "#/$defs/IdString",
          "description": "Activity identifier unique within the script."
        },
        "introMessage": {
          "$ref": "#/$defs/Message",
          "description": "Shown at activity start."
        },
        "endMessage": {
          "$ref": "#/$defs/Message",
          "description": "Shown when the activity finishes."
        },
        "steps": {
          "type": "array",
          "description": "Ordered Range Analysis steps.",
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/RangeAnalysisScriptedStep"
          }
        }
      },
      "required": [
        "nodeType",
        "id",
        "introMessage",
        "endMessage",
        "steps"
      ]
    },
    "PerformanceCenterScriptedActivity": {
      "type": "object",
      "description": "Activity targeting the Performance Center app. Steps run in order.",
      "additionalProperties": false,
      "properties": {
        "nodeType": {
          "const": "PerformanceCenterScriptedActivity",
          "description": "Discriminator. Must be exactly this value."
        },
        "id": {
          "$ref": "#/$defs/IdString",
          "description": "Activity identifier unique within the script."
        },
        "introMessage": {
          "$ref": "#/$defs/Message",
          "description": "Shown at activity start."
        },
        "endMessage": {
          "$ref": "#/$defs/Message",
          "description": "Shown when the activity finishes."
        },
        "steps": {
          "type": "array",
          "description": "Ordered Performance Center steps.",
          "minItems": 1,
          "items": {
            "$ref": "#/$defs/PerformanceCenterScriptedStep"
          }
        }
      },
      "required": [
        "nodeType",
        "id",
        "introMessage",
        "endMessage",
        "steps"
      ]
    },
    "Activity": {
      "oneOf": [
        {
          "$ref": "#/$defs/RangeAnalysisScriptedActivity"
        },
        {
          "$ref": "#/$defs/PerformanceCenterScriptedActivity"
        }
      ],
      "description": "Activity union. Exactly one of the supported activity types."
    }
  }
}